{"total":20,"pageSize":12,"pageCount":2,"data":[{"title":"Java中属性初始化的差异","uid":"4b2a67d332f9fb2b23f7506e99d7e81b","slug":"Kafka架构与核心概念","date":"2023-08-08T08:57:39.000Z","updated":"2023-08-08T08:57:53.023Z","comments":true,"path":"api/articles/Kafka架构与核心概念.json","cover":null,"text":"![[Pasted image 20230808161829.png]] Kafka Cluster集群：Kafka集群会由一个或多个Broker（有的地方也叫server或者是node）组成，Broker负责Producer和Consumer之间的消息传递和持久化。 是整个架构...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Kafka","slug":"Kafka","count":1,"path":"api/tags/Kafka.json"}],"author":{"name":"姚文彬","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"深入底层 掌握脉搏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Performance Schema入门指南:你的MySQL性能监测杀器","uid":"ba1c6774f6090755efbcf2d6c3343eae","slug":"Performance-Schema入门指南-你的MySQL性能监测杀器","date":"2022-11-28T14:23:44.000Z","updated":"2022-11-28T14:25:33.753Z","comments":true,"path":"api/articles/Performance-Schema入门指南-你的MySQL性能监测杀器.json","cover":null,"text":"简介Performance提供了有关MySQL服务器内部运行的底层指标。在高负载下数据库调优是一个循环迭代的过程，每次更改以调整数据库的性能时，都需要了解更改是否有什么影响。而Performance Schama就是一个能够存储回答这个问题所需要的数据的数据库。 工作机制插桩（i...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":5,"path":"api/tags/MySQL.json"},{"name":"监控","slug":"监控","count":1,"path":"api/tags/监控.json"}],"author":{"name":"姚文彬","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"深入底层 掌握脉搏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"你真的了解你的MySQL吗(MySQL基准测试)","uid":"4468f948c4ca4e742d657728958a113e","slug":"你真的了解你的MySQL吗-MySQL基准测试","date":"2022-11-12T13:31:33.000Z","updated":"2022-11-12T13:31:47.878Z","comments":true,"path":"api/articles/你真的了解你的MySQL吗-MySQL基准测试.json","cover":[],"text":"如果你没有真正的对服务器上的MySQL进行基准测试，就无法了解其真实情况到底是如何。 基准测试是数据库工程师必备的技能之一，否则你如何知道自己真的在优化数据库？ 为什么需要基测？基测可以观察系统在不同压力下的行为： 验证基于系统的一些假设是否符合实际情况。 测试当前的运行情况，如...","link":"","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":5,"path":"api/tags/MySQL.json"}],"author":{"name":"姚文彬","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"深入底层 掌握脉搏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"基于Prometheus实现SpringBoot应用数据采集与业务埋点","uid":"51d09946e274f8b72c614484ac075533","slug":"基于Prometheus实现SpringBoot应用数据采集与业务埋点","date":"2023-05-22T14:01:22.000Z","updated":"2023-05-22T14:07:34.723Z","comments":true,"path":"api/articles/基于Prometheus实现SpringBoot应用数据采集与业务埋点.json","cover":[],"text":"前提概要：假设你已经了解了Prometheus是做什么的，以及如何基于Prometheus搭建一个指标监控体系。本章节将讲解如何基于Prometheus对SpringBoot进行指标采集 SpringBoot监控添加prometheus依赖： &lt;!-- for monito...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":1,"path":"api/tags/SpringBoot.json"},{"name":"Prometheus","slug":"Prometheus","count":1,"path":"api/tags/Prometheus.json"},{"name":"业务","slug":"业务","count":1,"path":"api/tags/业务.json"}],"author":{"name":"姚文彬","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"深入底层 掌握脉搏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Maven版本管理：使用单个属性来管理项目所有模块的版本号","uid":"3e10980a1e0900db8865138486accab8","slug":"maven/Maven版本管理：使用单个属性来管理项目所有模块的版本号","date":"2023-05-18T13:26:54.141Z","updated":"2023-05-18T13:51:08.102Z","comments":true,"path":"api/articles/maven/Maven版本管理：使用单个属性来管理项目所有模块的版本号.json","cover":null,"text":"本章节将讲解如何使用单个变量来集中一个由Maven组成的多模块项目的版本号 在开发过程中，我们总是要对项目进行不断的迭代升级，而在Maven的版本控制中，我们可以通过不同的版本号，来将不同版本的项目打包放于同样的地方。![](Pasted image 20230518212916...","link":"","photos":[],"count_time":{"symbolsCount":725,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Maven","slug":"Maven","count":1,"path":"api/tags/Maven.json"}],"author":{"name":"姚文彬","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"深入底层 掌握脉搏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"MMAP/Page Cache - 以Javaer的角度看待内存映射文件机制","uid":"90732c789d41e9ff8627e26b080796f4","slug":"java/MMAP与Page Cache","date":"2023-05-09T08:20:21.340Z","updated":"2023-05-09T08:33:56.261Z","comments":true,"path":"api/articles/java/MMAP与Page Cache.json","cover":null,"text":"什么是MMAP？MMAP(Memory-mapped file)是一种内存映射文件的机制。用于建立从文件到内存之间的一种映射，将对磁盘的写入映射为对内存的写入，以增加对于文件IO的效率。 在Linux上主要通过mmap()、munmap()、msync()等系统调用来实现。 什么...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":5,"path":"api/tags/Java.json"},{"name":"OS","slug":"OS","count":1,"path":"api/tags/OS.json"}],"author":{"name":"姚文彬","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"深入底层 掌握脉搏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"注册JVM钩子函数来实现优雅停机","uid":"7d219fe8f2483d731e9b880a374df88c","slug":"java/注册JVM钩子函数来实现优雅停机","date":"2023-05-08T05:37:12.125Z","updated":"2023-05-09T08:33:16.966Z","comments":true,"path":"api/articles/java/注册JVM钩子函数来实现优雅停机.json","cover":null,"text":"在各种连接池场景下，当应用发生了关闭。那么所有连接池（数据源、请求业务线程）都会强行的中止线程，如果此时正在发生一些较为重要的业务操作也会被强制停止。 因此作为有经验的工程师，我们会通过Runtime::addShutdownHook()来帮助我们注册JVM的关闭钩子，已达到JV...","link":"","photos":[],"count_time":{"symbolsCount":746,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JVM","slug":"JVM","count":2,"path":"api/tags/JVM.json"},{"name":"Java","slug":"Java","count":5,"path":"api/tags/Java.json"},{"name":"线程池","slug":"线程池","count":1,"path":"api/tags/线程池.json"}],"author":{"name":"姚文彬","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"深入底层 掌握脉搏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Java中属性初始化的差异","uid":"4b2a67d332f9fb2b23f7506e99d7e81b","slug":"Java中属性初始化的差异","date":"2023-05-05T13:14:39.000Z","updated":"2023-05-05T13:16:35.902Z","comments":true,"path":"api/articles/Java中属性初始化的差异.json","cover":null,"text":"在Java中，你可以直接在声明属性时初始化、也可以在构造函数中初始化、甚至可以在static代码块中初始化，那么三者有什么差异呢？ 初始化的时机不同static代码块中的代码会在类第一次加载时就进行，不需要实例的存在。而构造函数和属性中初始化的变量在对象创建时才进行。所以stat...","link":"","photos":[],"count_time":{"symbolsCount":305,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":5,"path":"api/tags/Java.json"}],"author":{"name":"姚文彬","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"深入底层 掌握脉搏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"RocketMQ事务消息","uid":"ad2c272cfe3adee335f5f82ded13d5f6","slug":"rocketmq/事务消息","date":"2023-04-24T06:08:43.782Z","updated":"2023-05-05T13:18:31.519Z","comments":true,"path":"api/articles/rocketmq/事务消息.json","cover":null,"text":"什么是事务首先我们先回顾一下事务的主要作用，是要保证多个操作的原子性，多个事务操作要么一起成功，要么一起失败。 分布式事务使用场景使用场景模拟：用户支付订单后，同时涉及到多个下游：物流发货、积分变更、购物车状态清空。在这个场景中的事务操作有四种： 订单系统的状态状态更新。 物流系...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":5,"path":"api/tags/Java.json"},{"name":"RocketMQ","slug":"RocketMQ","count":1,"path":"api/tags/RocketMQ.json"},{"name":"分布式事务","slug":"分布式事务","count":1,"path":"api/tags/分布式事务.json"}],"author":{"name":"姚文彬","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"深入底层 掌握脉搏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"FastJson安全漏洞分析","uid":"13c371c2ff633aa9e8eadac4915ee855","slug":"FastJson安全漏洞","date":"2023-03-30T01:27:51.735Z","updated":"2023-03-30T03:01:30.668Z","comments":true,"path":"api/articles/FastJson安全漏洞.json","cover":null,"text":"FastJson如何进行序列化的？FastJson和Jackson的序列化方式都是通过反射获取对象的getter方法来获得属性值的（Gson是通过直接反射属性）。 FastJson的序列化问题当一个类实现了一个接口的时候，在FastJson中进行序列化时，会将这个类的实际类型抹去...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":5,"path":"api/tags/Java.json"},{"name":"序列化","slug":"序列化","count":1,"path":"api/tags/序列化.json"}],"author":{"name":"姚文彬","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"深入底层 掌握脉搏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"JDK里程碑:JDK8到JDK17的重要特性汇总","uid":"ecdf1c9aa66b051d88622cd0bc08ef91","slug":"JDK里程碑-JDK8到JDK17的重要特性汇总","date":"2022-11-27T03:59:14.000Z","updated":"2022-11-27T03:59:38.658Z","comments":true,"path":"api/articles/JDK里程碑-JDK8到JDK17的重要特性汇总.json","cover":null,"text":" 从BenchMark可以看到，仅需要从JDK8到JDK17就能够获得64%的改进 — JavaOne开幕式 本文章的灵感来源于Java One开幕式上JDK开发者的这句话。JDK向前兼容的重要特性意味着，我们不需要改动任何代码只需要将运行源代码的JDK从8替换为JDK17就能够...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"JDK","slug":"JDK","count":1,"path":"api/tags/JDK.json"},{"name":"JVM","slug":"JVM","count":2,"path":"api/tags/JVM.json"}],"author":{"name":"姚文彬","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"深入底层 掌握脉搏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"OkHttp：更加优雅的客户端OkHttps","uid":"c7562fc289c09e37ab4a4b417948e80b","slug":"OkHttp：更加优雅的客户端OkHttps","date":"2022-11-21T00:55:52.000Z","updated":"2022-11-21T00:56:34.620Z","comments":true,"path":"api/articles/OkHttp：更加优雅的客户端OkHttps.json","cover":null,"text":"上文中，我们介绍了OkHttp的一些常见的用法，以及对其API进行了一些便于调用的封装。而笔者在深入学习的过程中发现了一个基于Lambda表达式、链式调用进行封装的OkHttps，使其的调用方式更加的优雅、简介。 简介https://ok.zhxu.cn/v4/introduct...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"工具","slug":"工具","count":2,"path":"api/tags/工具.json"},{"name":"OkHttp","slug":"OkHttp","count":2,"path":"api/tags/OkHttp.json"}],"author":{"name":"姚文彬","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"深入底层 掌握脉搏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}