{"title":"Redis BitMap学习:实现海量二值数据统计","uid":"c0da45d30bd1cfd1cf13bf28f1302d4d","slug":"Redis-BitMap学习-实现海量二值数据统计","date":"2022-11-15T01:08:44.000Z","updated":"2022-11-15T01:09:06.495Z","comments":true,"path":"api/articles/Redis-BitMap学习-实现海量二值数据统计.json","cover":[],"content":"<h2 id=\"为什么要使用bitmap\"><a href=\"#为什么要使用bitmap\" class=\"headerlink\" title=\"为什么要使用bitmap\"></a>为什么要使用bitmap</h2><p>Bitmap 的底层数据结构用的是 String 类型的 SDS 数据结构来保存位数组，<strong>把每个字节数组的 8 个 bit 位利用起来</strong>，每个 bit 位 表示一个元素的二值状态（不是 0 就是 1）。<br>可以将 Bitmap 看成是一个 bit 为单位的数组，所以能够极大程度的节省空间。数组的每个单元只能存储 0 或者 1，数组的下标在 Bitmap 中叫做 offset 偏移量。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/8372900/1668473113665-96002f30-f474-4633-9e26-10c416fda2d4.png#averageHue=%23fafaf0&clientId=u1d1ebbc3-66ee-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=248&id=u66d76725&margin=%5Bobject%20Object%5D&name=image.png&originHeight=495&originWidth=1080&originalType=binary&ratio=1&rotation=0&showTitle=false&size=175860&status=done&style=none&taskId=u291071d8-119b-40fa-9d04-7b72655b4ff&title=&width=540\" alt=\"image.png\"></p>\n<h2 id=\"bitmap如何使用\"><a href=\"#bitmap如何使用\" class=\"headerlink\" title=\"bitmap如何使用\"></a>bitmap如何使用</h2><p>bitmap在Redis2.2.0版本后就被引入了，所以我们可以直接使用。<br>其常用操作指令有：<code>SETBIT &lt;key&gt; &lt;offset&gt; &lt;[0,1]&gt;</code>、<code>GETBIT &lt;key&gt; &lt;offset&gt;</code>、<code>BITCOUNT &lt;key&gt;</code>、<code>BITPOS KEY</code>、<code>BITOP operation destkey key [key ...]</code>。</p>\n<h2 id=\"使用场景：用户打卡\"><a href=\"#使用场景：用户打卡\" class=\"headerlink\" title=\"使用场景：用户打卡\"></a>使用场景：用户打卡</h2><p>假设我们使用一个bitmap来统计所有的用户打卡状态，现在用户1001要打卡。<br>那么通过<code>SETBIT sign_status 1001 1</code>来表示用户1001打卡；</p>\n<h3 id=\"判断用户是否打卡\"><a href=\"#判断用户是否打卡\" class=\"headerlink\" title=\"判断用户是否打卡\"></a>判断用户是否打卡</h3><p>通过<code>GETBIT sign_status 1001</code>来查看该用户是否打卡。</p>\n<h3 id=\"查看用户每个月打卡情况\"><a href=\"#查看用户每个月打卡情况\" class=\"headerlink\" title=\"查看用户每个月打卡情况\"></a>查看用户每个月打卡情况</h3><p>如果要按照时间维度来进行统计的话，我们一般会把key设置成<code>sign:&#123;uid&#125;:&#123;yyyyMM&#125;</code>的格式。而对于每个key最多只会占用31个bit也就是4个字节， 非常的节省了。</p>\n<ol>\n<li><p>用户1001在2015年5月16日打卡</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">SETBIT sign:1001:202105 <span class=\"token number\">16</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>判断用户在2015年5月的打卡情况</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">BITCOUNT sign:1001:202105<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"查看用户首次打卡日期\"><a href=\"#查看用户首次打卡日期\" class=\"headerlink\" title=\"查看用户首次打卡日期\"></a>查看用户首次打卡日期</h3><p>通过BITPOS，我们可以快速的得出一个BITMAP中第一个值为<value>的offset</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">BITPOS sign:1001:202105 <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"统计某个时间段的所有用户登陆次数\"><a href=\"#统计某个时间段的所有用户登陆次数\" class=\"headerlink\" title=\"统计某个时间段的所有用户登陆次数\"></a>统计某个时间段的所有用户登陆次数</h3><p>如果在记录了一亿个用户连续7天打卡数据，如何统计出这7天连续打卡的用户总数呢？<br>Redis提供了<code>BITOP &lt;operation&gt; &lt;destinationKey&gt; &lt;key1&gt; [&lt;key2&gt; ...]</code>这个指令，能够对多个BITMAP进行AND、OR、NOT、XOR的位计算。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/8372900/1668473913669-d527eb1d-556a-4be6-bdfe-a2e2946b4801.png#averageHue=%23fcfcf1&clientId=u1d1ebbc3-66ee-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=183&id=u475fc649&margin=%5Bobject%20Object%5D&name=image.png&originHeight=365&originWidth=909&originalType=binary&ratio=1&rotation=0&showTitle=false&size=83534&status=done&style=none&taskId=u2f182375-4a17-4723-8498-c5eebfbad34&title=&width=454.5\" alt=\"image.png\"><br>为了应付这种业务需求，我们会采用<code>sign:&#123;yyyyMMdd&#125; &#123;uid&#125;</code>的设计方式来实现需求。 而想要统计2022年11月01日到03日的用户连续打卡次数只需要通过指令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">BITOP and sign:20221101to20221103 sign:20221101 sign:20221102 sign:20221103<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>即可实现。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>当我们遇到的统计场景只需要统计数据的二值状态，比如用户是否存在、 ip 是否是黑名单、以及签到打卡统计等场景就可以考虑使用 Bitmap。<br>只需要一个 bit 位就能表示 0 和 1。在统计海量数据的时候将大大减少内存占用。</p>\n","text":"为什么要使用bitmapBitmap 的底层数据结构用的是 String 类型的 SDS 数据结构来保存位数组，把每个字节数组的 8 个 bit 位利用起来，每个 bit 位 表示一个元素的二值状态（不是 0 就是 1）。可以将 Bitmap 看成是一个 bit 为单位的数组，所...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Reids","slug":"Reids","count":1,"path":"api/tags/Reids.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8bitmap\"><span class=\"toc-text\">为什么要使用bitmap</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#bitmap%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">bitmap如何使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9A%E7%94%A8%E6%88%B7%E6%89%93%E5%8D%A1\"><span class=\"toc-text\">使用场景：用户打卡</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E7%94%A8%E6%88%B7%E6%98%AF%E5%90%A6%E6%89%93%E5%8D%A1\"><span class=\"toc-text\">判断用户是否打卡</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E7%94%A8%E6%88%B7%E6%AF%8F%E4%B8%AA%E6%9C%88%E6%89%93%E5%8D%A1%E6%83%85%E5%86%B5\"><span class=\"toc-text\">查看用户每个月打卡情况</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E7%94%A8%E6%88%B7%E9%A6%96%E6%AC%A1%E6%89%93%E5%8D%A1%E6%97%A5%E6%9C%9F\"><span class=\"toc-text\">查看用户首次打卡日期</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%9F%E8%AE%A1%E6%9F%90%E4%B8%AA%E6%97%B6%E9%97%B4%E6%AE%B5%E7%9A%84%E6%89%80%E6%9C%89%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86%E6%AC%A1%E6%95%B0\"><span class=\"toc-text\">统计某个时间段的所有用户登陆次数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol>","author":{"name":"yaowenbin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位不断成长的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"MySQL深分页问题及解决方案","uid":"09b0502743a194205f4a0a60c94f4ead","slug":"MySQL深分页问题及解决方案","date":"2022-11-12T13:28:38.000Z","updated":"2022-11-12T13:29:02.703Z","comments":true,"path":"api/articles/MySQL深分页问题及解决方案.json","cover":null,"text":"在MySQL中的需要分页操作我们会使用limit关键字加上偏移量来实现。但实际上limit 10000， 10分页关键字的实际原理是，查询出10000 + 10行数据后，舍弃前面的10000行数据，然后取最后的10行数据。 而要想优化这种分页查询，我们会尽可能的使用覆盖索引扫描 ...","link":"","photos":[],"count_time":{"symbolsCount":454,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":4,"path":"api/tags/MySQL.json"}],"author":{"name":"yaowenbin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位不断成长的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"如何使用Swagger3与OpenAPI规范","uid":"738b9e0126fd231ff00bb0e09eaaa743","slug":"如何使用Swagger3与OpenAPI规范","date":"2022-11-13T08:09:01.000Z","updated":"2022-11-13T08:10:46.664Z","comments":true,"path":"api/articles/如何使用Swagger3与OpenAPI规范.json","cover":null,"text":"swagger 是一个 api 文档维护组织，后来成为了 Open API 标准的主要定义者，现在最新的版本为17年发布的 Swagger3（Open Api3）。 国内绝大部分人还在用过时的swagger2（17年停止维护并更名为swagger3） swagger2的包名为 i...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"OpenAPI","slug":"OpenAPI","count":1,"path":"api/tags/OpenAPI.json"}],"author":{"name":"yaowenbin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位不断成长的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}