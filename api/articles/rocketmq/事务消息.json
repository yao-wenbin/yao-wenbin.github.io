{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"rocketmq/事务消息","date":"2023-04-24T06:08:43.782Z","updated":"2023-04-24T08:34:22.827Z","comments":true,"path":"api/articles/rocketmq/事务消息.json","cover":null,"content":"<h2 id=\"什么是事务\"><a href=\"#什么是事务\" class=\"headerlink\" title=\"什么是事务\"></a>什么是事务</h2><p>首先我们先回顾一下事务的主要作用，是要保证多个操作的原子性，多个事务操作要么一起成功，要么一起失败。</p>\n<h2 id=\"分布式事务使用场景\"><a href=\"#分布式事务使用场景\" class=\"headerlink\" title=\"分布式事务使用场景\"></a>分布式事务使用场景</h2><p>使用场景模拟：用户支付订单后，同时涉及到多个下游：物流发货、积分变更、购物车状态清空。<br>在这个场景中的事务操作有四种：</p>\n<ol>\n<li>订单系统的状态状态更新。</li>\n<li>物流系统的订单物流记录新增。</li>\n<li>积分系统的用户积分更新。</li>\n<li>购物车系统的用户购物车状态更新。</li>\n</ol>\n<h2 id=\"传统解决方案\"><a href=\"#传统解决方案\" class=\"headerlink\" title=\"传统解决方案\"></a>传统解决方案</h2><p>为了实现这样的事务操作，传统的解决方案就是基于XA协议（二阶段和三阶段提交）的分布式事务，将四个操作分装为四个独立的大事务来解决。这样能够帮助业务处理结果的正确性，但是无法由于资源锁定的粒度大，并发性能低。</p>\n<h2 id=\"RocketMQ的事务消息\"><a href=\"#RocketMQ的事务消息\" class=\"headerlink\" title=\"RocketMQ的事务消息\"></a>RocketMQ的事务消息</h2><p>而RocketMQ中的事务消息，为我们提供了最终一致性的解决方案：<br>处理流程如下图所示：</p>\n<p>()[&#x2F;Pasted image 20230424141848.png]</p>\n<ol>\n<li>实现过程类似二阶段提交，通过Half Message半消息来帮助我们在Server中作为提交第一阶段作为事务的开始。</li>\n<li>如果服务端未收到发送着提交的第二阶段的二次确认结果，那么会主动的向消息生产者集群的任一消费者发起消息回查。</li>\n</ol>\n<h2 id=\"使用限制：\"><a href=\"#使用限制：\" class=\"headerlink\" title=\"使用限制：\"></a>使用限制：</h2><p>根据RocketMQ官方文档中给出的的事务消息的使用限制如下：</p>\n<ol>\n<li>仅支持MessageType消息为Tranasction的Topic主题使用。</li>\n<li>Apache RocketMQ不保证消息消费结果与上游事务的一致性，所以需要下游业务分支做好<strong>消费重试</strong>自行保证消息被正确处理。</li>\n<li>中间状态可见性，RocketMQ的事务消息为最终一致性，所以消息在提交到消费完成之前，上游和下游看到的消息的状态可能会出现不一致性。</li>\n<li>事务超时时间，RocketMQ事务生命周期默认存在超时机制，若执行超时时间内服务端无法确认提交还是回滚，那么最终会回滚消息。</li>\n</ol>\n<h2 id=\"实践：\"><a href=\"#实践：\" class=\"headerlink\" title=\"实践：\"></a>实践：</h2><ol>\n<li><p>引入RocketMQ官方的springboot集成包</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.rocketmq<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>rocketmq-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.2.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>  \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>使用application.yml配置nameserv地址：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">rocketmq</span><span class=\"token punctuation\">:</span>  \n  <span class=\"token key atrule\">name-server</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">9876</span>  \n  <span class=\"token key atrule\">producer</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> producer<span class=\"token punctuation\">-</span>group<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>创建Application</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProducerApplication</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CommandLineRunner</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token annotation punctuation\">@Resource</span>  \n\t<span class=\"token class-name\">OrderPaidEventProducer</span> paidEventProducer<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token annotation punctuation\">@Override</span>  \n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \t  \n\t    <span class=\"token comment\">// Transaction Message  </span>\n\t    <span class=\"token class-name\">OrderPaidMessage</span> paidMessage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderPaidMessage</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    paidEventProducer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>paidMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token punctuation\">&#125;</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n\t    <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>创建OrderPadiEventProducer订单支付事务消息发送者</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**  \n * @Author yaowenbin\n * @Date 2023/4/24 \n */</span>\n<span class=\"token annotation punctuation\">@Service</span>  \n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderPaidEventProducer</span> <span class=\"token punctuation\">&#123;</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderPaidEventProducer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">RocketMQTemplate</span> template<span class=\"token punctuation\">;</span>  \n  \n  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderPaidMessage</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n        <span class=\"token class-name\">TransactionSendResult</span> result <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessageInTransaction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application-transaction\"</span><span class=\"token punctuation\">,</span>  \n                <span class=\"token class-name\">MessageBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">withPayload</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n                <span class=\"token keyword\">null</span>  \n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Transaction Send Result: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">&#125;</span>  \n<span class=\"token operator\">%</span>\n    <span class=\"token annotation punctuation\">@RocketMQTransactionListener</span>  \n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TransactionListenerImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RocketMQLocalTransactionListener</span> <span class=\"token punctuation\">&#123;</span>  \n  \n        <span class=\"token annotation punctuation\">@Override</span>  \n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">RocketMQLocalTransactionState</span> <span class=\"token function\">executeLocalTransaction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span> message<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">&#125;</span>  \n  \n        <span class=\"token annotation punctuation\">@Override</span>  \n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">RocketMQLocalTransactionState</span> <span class=\"token function\">checkLocalTransaction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n            <span class=\"token class-name\">OrderPaidMessage</span> payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderPaidMessage</span><span class=\"token punctuation\">)</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getPayload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token keyword\">return</span> <span class=\"token function\">checkOrderStatus</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">.</span><span class=\"token function\">getOrderId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">RocketMQLocalTransactionState</span><span class=\"token punctuation\">.</span><span class=\"token constant\">COMMIT</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">RocketMQLocalTransactionState</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ROLLBACK</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">&#125;</span>  \n  \n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">checkOrderStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n            <span class=\"token keyword\">return</span> id <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">&#125;</span>  \n    <span class=\"token punctuation\">&#125;</span>  \n  \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n","text":"什么是事务首先我们先回顾一下事务的主要作用，是要保证多个操作的原子性，多个事务操作要么一起成功，要么一起失败。 分布式事务使用场景使用场景模拟：用户支付订单后，同时涉及到多个下游：物流发货、积分变更、购物车状态清空。在这个场景中的事务操作有四种： 订单系统的状态状态更新。 物流系...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">什么是事务</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">分布式事务使用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E7%BB%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">传统解决方案</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RocketMQ%E7%9A%84%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">RocketMQ的事务消息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E9%99%90%E5%88%B6%EF%BC%9A\"><span class=\"toc-text\">使用限制：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E8%B7%B5%EF%BC%9A\"><span class=\"toc-text\">实践：</span></a></li></ol>","author":{"name":"yaowenbin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位不断成长的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"你真的了解你的MySQL吗(MySQL基准测试)","uid":"4468f948c4ca4e742d657728958a113e","slug":"你真的了解你的MySQL吗-MySQL基准测试","date":"2022-11-12T13:31:33.000Z","updated":"2022-11-12T13:31:47.878Z","comments":true,"path":"api/articles/你真的了解你的MySQL吗-MySQL基准测试.json","cover":[],"text":"如果你没有真正的对服务器上的MySQL进行基准测试，就无法了解其真实情况到底是如何。 基准测试是数据库工程师必备的技能之一，否则你如何知道自己真的在优化数据库？ 为什么需要基测？基测可以观察系统在不同压力下的行为： 验证基于系统的一些假设是否符合实际情况。 测试当前的运行情况，如...","link":"","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":5,"path":"api/tags/MySQL.json"}],"author":{"name":"yaowenbin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位不断成长的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"FastJson安全漏洞分析","uid":"13c371c2ff633aa9e8eadac4915ee855","slug":"FastJson安全漏洞","date":"2023-03-30T01:27:51.735Z","updated":"2023-03-30T03:01:30.668Z","comments":true,"path":"api/articles/FastJson安全漏洞.json","cover":null,"text":"FastJson如何进行序列化的？FastJson和Jackson的序列化方式都是通过反射获取对象的getter方法来获得属性值的（Gson是通过直接反射属性）。 FastJson的序列化问题当一个类实现了一个接口的时候，在FastJson中进行序列化时，会将这个类的实际类型抹去...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":2,"path":"api/tags/Java.json"},{"name":"序列化","slug":"序列化","count":1,"path":"api/tags/序列化.json"}],"author":{"name":"yaowenbin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位不断成长的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}