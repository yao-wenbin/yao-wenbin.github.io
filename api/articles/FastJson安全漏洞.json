{"title":"FastJson安全漏洞分析","uid":"13c371c2ff633aa9e8eadac4915ee855","slug":"FastJson安全漏洞","date":"2023-03-30T01:27:51.735Z","updated":"2023-03-30T03:01:30.668Z","comments":true,"path":"api/articles/FastJson安全漏洞.json","cover":null,"content":"<h2 id=\"FastJson如何进行序列化的？\"><a href=\"#FastJson如何进行序列化的？\" class=\"headerlink\" title=\"FastJson如何进行序列化的？\"></a>FastJson如何进行序列化的？</h2><p>FastJson和Jackson的序列化方式都是通过反射获取对象的getter方法来获得属性值的（Gson是通过直接反射属性）。</p>\n<h2 id=\"FastJson的序列化问题\"><a href=\"#FastJson的序列化问题\" class=\"headerlink\" title=\"FastJson的序列化问题\"></a>FastJson的序列化问题</h2><p>当一个类实现了一个接口的时候，在FastJson中进行序列化时，会将这个类的实际类型抹去，只保存该类所实现的接口类型。而这会导致反序列化时无法拿到原始类型。</p>\n<p>在类嵌套类的序列化中，FastJson并不能够为我们将子类给成功反序列化：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 序列化</span>\n<span class=\"token class-name\">Store</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hollis\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Apple</span> apple <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napple<span class=\"token punctuation\">.</span><span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">setFruit</span><span class=\"token punctuation\">(</span>apple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> jsonString <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toJSONString : \"</span> <span class=\"token operator\">+</span> jsonString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// result:</span>\ntoJSONString <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"fruit\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"price\"</span><span class=\"token operator\">:</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Hollis\"</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 反序列化</span>\n<span class=\"token class-name\">Store</span> newStore <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Store</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parseObject : \"</span> <span class=\"token operator\">+</span> newStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Apple</span> newApple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">)</span>newStore<span class=\"token punctuation\">.</span><span class=\"token function\">getFruit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getFruit : \"</span> <span class=\"token operator\">+</span> newApple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// result:</span>\ntoJSONString <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"fruit\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"price\"</span><span class=\"token operator\">:</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Hollis\"</span><span class=\"token punctuation\">&#125;</span>\nparseObject <span class=\"token operator\">:</span> <span class=\"token class-name\">Store</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">=</span><span class=\"token char\">'Hollis'</span><span class=\"token punctuation\">,</span> fruit<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">Exception</span> in thread <span class=\"token string\">\"main\"</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>ClassCastException</span><span class=\"token operator\">:</span> com<span class=\"token punctuation\">.</span>hollis<span class=\"token punctuation\">.</span>lab<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>$<span class=\"token class-name\">Proxy0</span> cannot be cast <span class=\"token keyword\">to</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hollis<span class=\"token punctuation\">.</span>lab<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Apple</span>\nat <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hollis<span class=\"token punctuation\">.</span>lab<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span></span>FastJsonTest</span><span class=\"token punctuation\">.</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FastJsonTest</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"AutoType\"><a href=\"#AutoType\" class=\"headerlink\" title=\"AutoType\"></a>AutoType</h2><p>而为了解决这个问题，在FastJson中引入了一个叫AutoType的机制，能够在序列化时把原始类型记录下来。<br>通过<code>SerializerFeature.WriteClassName</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> jsonString <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">,</span><span class=\"token class-name\">SerializerFeature<span class=\"token punctuation\">.</span>WriteClassName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// reuslt</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"@type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"com.hollis.lab.fastjson.test.Store\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"fruit\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"@type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"com.hollis.lab.fastjson.test.Apple\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"price\"</span><span class=\"token operator\">:</span><span class=\"token number\">0.5</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Hollis\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到JSON字符串中多出来了@type类型，标注了类的原始类型。在反序列化时，FastJson看到@type的类型就会从Java类库中查找到对应的类。</p>\n<h2 id=\"RMI\"><a href=\"#RMI\" class=\"headerlink\" title=\"RMI\"></a>RMI</h2><p>而这样本身是没有问题的。而刚好在sun官方提供的类库中有一个JdbcRowSetImpl类，其datasourceName支持<strong>rmi</strong>传入。没错和log4j2一样的RMI源的问题，当解析这个uri的时候，会去指定的rmi地址中调用方法。<br>所以如果黑客在这个rmi地址中注入了想要执行的指令，那么就会造成严重的后果了。</p>\n<h2 id=\"如何避免\"><a href=\"#如何避免\" class=\"headerlink\" title=\"如何避免\"></a>如何避免</h2><ol>\n<li>升级到最新版本的FastJson</li>\n<li>打开SafeMode，FastJson会自动禁用AutoType。</li>\n</ol>\n<h2 id=\"FastJson的优势\"><a href=\"#FastJson的优势\" class=\"headerlink\" title=\"FastJson的优势\"></a>FastJson的优势</h2><p>虽然FastJson的AutoType导致了安全漏洞，由于其自己定义了序列化工具类，并且使用asm技术避免反射、使用缓存、并且做了很多算法优化等方式，大大提升了序列化及反序列化的效率。</p>\n","text":"FastJson如何进行序列化的？FastJson和Jackson的序列化方式都是通过反射获取对象的getter方法来获得属性值的（Gson是通过直接反射属性）。 FastJson的序列化问题当一个类实现了一个接口的时候，在FastJson中进行序列化时，会将这个类的实际类型抹去...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":2,"path":"api/tags/Java.json"},{"name":"序列化","slug":"序列化","count":1,"path":"api/tags/序列化.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#FastJson%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">FastJson如何进行序列化的？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#FastJson%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">FastJson的序列化问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#AutoType\"><span class=\"toc-text\">AutoType</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RMI\"><span class=\"toc-text\">RMI</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D\"><span class=\"toc-text\">如何避免</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#FastJson%E7%9A%84%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">FastJson的优势</span></a></li></ol>","author":{"name":"yaowenbin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位不断成长的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"rocketmq/事务消息","date":"2023-04-24T06:08:43.782Z","updated":"2023-04-24T08:34:22.827Z","comments":true,"path":"api/articles/rocketmq/事务消息.json","cover":null,"text":"什么是事务首先我们先回顾一下事务的主要作用，是要保证多个操作的原子性，多个事务操作要么一起成功，要么一起失败。 分布式事务使用场景使用场景模拟：用户支付订单后，同时涉及到多个下游：物流发货、积分变更、购物车状态清空。在这个场景中的事务操作有四种： 订单系统的状态状态更新。 物流系...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"yaowenbin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位不断成长的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JDK里程碑:JDK8到JDK17的重要特性汇总","uid":"ecdf1c9aa66b051d88622cd0bc08ef91","slug":"JDK里程碑-JDK8到JDK17的重要特性汇总","date":"2022-11-27T03:59:14.000Z","updated":"2022-11-27T03:59:38.658Z","comments":true,"path":"api/articles/JDK里程碑-JDK8到JDK17的重要特性汇总.json","cover":null,"text":" 从BenchMark可以看到，仅需要从JDK8到JDK17就能够获得64%的改进 — JavaOne开幕式 本文章的灵感来源于Java One开幕式上JDK开发者的这句话。JDK向前兼容的重要特性意味着，我们不需要改动任何代码只需要将运行源代码的JDK从8替换为JDK17就能够...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"JDK","slug":"JDK","count":1,"path":"api/tags/JDK.json"},{"name":"JVM","slug":"JVM","count":1,"path":"api/tags/JVM.json"}],"author":{"name":"yaowenbin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位不断成长的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}