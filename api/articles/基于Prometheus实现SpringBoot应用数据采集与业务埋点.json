{"title":"基于Prometheus实现SpringBoot应用数据采集与业务埋点","uid":"51d09946e274f8b72c614484ac075533","slug":"基于Prometheus实现SpringBoot应用数据采集与业务埋点","date":"2023-05-22T14:01:22.000Z","updated":"2023-05-22T14:03:13.095Z","comments":true,"path":"api/articles/基于Prometheus实现SpringBoot应用数据采集与业务埋点.json","cover":null,"content":"<h1 id=\"SpringBoot监控\"><a href=\"#SpringBoot监控\" class=\"headerlink\" title=\"SpringBoot监控\"></a>SpringBoot监控</h1><p>添加prometheus依赖：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!-- for monitor --></span>  \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-actuator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.micrometer<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>micrometer-registry-prometheus<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用actuator暴露prometheus端口：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">management</span><span class=\"token punctuation\">:</span> \n\t<span class=\"token key atrule\">endpoints</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token key atrule\">exposure</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"prometheus\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Prometheus会为自动的为SpringBoot应用产生生成非常多个监控指标，在正常情况下足够我们使用了：<br>![[Pasted image 20230522174238.png]]</p>\n<h1 id=\"业务埋点\"><a href=\"#业务埋点\" class=\"headerlink\" title=\"业务埋点\"></a>业务埋点</h1><p>spring-boot-actuator只能够帮助我们采集技术上的指标。如果我们想对业务指标进行监控，则可以对其进行拓展，Prometheus注解和API的方式，帮助我们快速的实现统计。</p>\n<h2 id=\"基于注解实现\"><a href=\"#基于注解实现\" class=\"headerlink\" title=\"基于注解实现\"></a>基于注解实现</h2><ol>\n<li><code>@Gauge</code> - 用于度量可变值的当前状态，例如内存使用量、CPU负载、线程数等。适用于度量瞬态数据。</li>\n<li>@Time - 用于记录方法的执行频率</li>\n<li>@Counted - 用于记录方法的调用次数，适合记录应用程序中重要事件的发送情况。例如用户请求的成功或失败计数</li>\n<li>@ExceptionMetered - 用于记录异常发生的次数和频率</li>\n</ol>\n<p>注意：<br>这些注解只是将指标名称和度量值注册到Micrometer中，并没有为所监控的指标创建实际的计数器对象。因此，我们还需要显示的将指标注册到Micrometer中：</p>\n<p>首先我们需要额外引入micrometer-core组件</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>  \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.micrometer<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>micrometer-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>，比如说我们想要监控下单接口的执行时间，则可以这样做：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderController</span><span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderController</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MeterRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n\t    registry<span class=\"token punctuation\">.</span><span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo.order.latency\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/place\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token annotation punctuation\">@Timed</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo.order.latency\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">place</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// do business code.</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"基于API实现\"><a href=\"#基于API实现\" class=\"headerlink\" title=\"基于API实现\"></a>基于API实现</h2><p>除了注解，我们还可以通过API的方式处理代码块中更复杂一些的情况对其进行埋点，基本的使用方式如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@RestController</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span>  \n  \n    <span class=\"token class-name\">Counter</span> counter<span class=\"token punctuation\">;</span>  \n\t<span class=\"token comment\">// 1. 通过自动注入MeterRegistry</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestController</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MeterRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n    <span class=\"token comment\">// 2. 通过对应的API接口构建采集器</span>\n        counter <span class=\"token operator\">=</span> <span class=\"token class-name\">Counter</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"charon_test_counts\"</span><span class=\"token punctuation\">)</span>  \n                <span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">&#125;</span>  \n  \n  \n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n\t    <span class=\"token comment\">// 3. 执行采集任务</span>\n        counter<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">&#125;</span>  \n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"统计线程情况\"><a href=\"#统计线程情况\" class=\"headerlink\" title=\"统计线程情况\"></a>统计线程情况</h2><p>通过ExecutorServiceMetrics.monitor()构造方法，我们可以对线程池进行监控以采集关键指标，以定时任务线程池为例，代码如下图所示：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Autowired</span>  \n<span class=\"token keyword\">private</span> <span class=\"token class-name\">MeterRegistry</span> meterRegistry<span class=\"token punctuation\">;</span>  \n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ScheduledExecutorService</span> <span class=\"token constant\">EXECUTOR</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">ExecutorServiceMetrics</span><span class=\"token punctuation\">.</span><span class=\"token function\">monitor</span><span class=\"token punctuation\">(</span>  \n        meterRegistry<span class=\"token punctuation\">,</span>  \n        <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n            <span class=\"token annotation punctuation\">@Override</span>  \n            <span class=\"token keyword\">public</span> <span class=\"token class-name\">Thread</span> <span class=\"token function\">newThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n                <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                t<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"schedule-thread-\"</span> <span class=\"token operator\">+</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">&#125;</span>  \n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Scheduled-Executor\"</span>  \n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>结果展示<br>![](Pasted image 20230522214103.png)</p>\n","feature":true,"text":"SpringBoot监控添加prometheus依赖： &lt;!-- for monitor --> &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":1,"path":"api/tags/SpringBoot.json"},{"name":"Prometheus","slug":"Prometheus","count":1,"path":"api/tags/Prometheus.json"},{"name":"业务","slug":"业务","count":1,"path":"api/tags/业务.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SpringBoot%E7%9B%91%E6%8E%A7\"><span class=\"toc-text\">SpringBoot监控</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%9A%E5%8A%A1%E5%9F%8B%E7%82%B9\"><span class=\"toc-text\">业务埋点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">基于注解实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8EAPI%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">基于API实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%9F%E8%AE%A1%E7%BA%BF%E7%A8%8B%E6%83%85%E5%86%B5\"><span class=\"toc-text\">统计线程情况</span></a></li></ol></li></ol>","author":{"name":"姚文彬","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"深入底层 掌握脉搏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Performance Schema入门指南:你的MySQL性能监测杀器","uid":"ba1c6774f6090755efbcf2d6c3343eae","slug":"Performance-Schema入门指南-你的MySQL性能监测杀器","date":"2022-11-28T14:23:44.000Z","updated":"2022-11-28T14:25:33.753Z","comments":true,"path":"api/articles/Performance-Schema入门指南-你的MySQL性能监测杀器.json","cover":null,"text":"简介Performance提供了有关MySQL服务器内部运行的底层指标。在高负载下数据库调优是一个循环迭代的过程，每次更改以调整数据库的性能时，都需要了解更改是否有什么影响。而Performance Schama就是一个能够存储回答这个问题所需要的数据的数据库。 工作机制插桩（i...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":5,"path":"api/tags/MySQL.json"},{"name":"监控","slug":"监控","count":1,"path":"api/tags/监控.json"}],"author":{"name":"姚文彬","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"深入底层 掌握脉搏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}