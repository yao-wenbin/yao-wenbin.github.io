{"title":"JDK里程碑:JDK8到JDK17的重要特性汇总","uid":"ecdf1c9aa66b051d88622cd0bc08ef91","slug":"JDK里程碑-JDK8到JDK17的重要特性汇总","date":"2022-11-27T03:59:14.000Z","updated":"2022-11-27T03:59:38.658Z","comments":true,"path":"api/articles/JDK里程碑-JDK8到JDK17的重要特性汇总.json","cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>从BenchMark可以看到，仅需要从JDK8到JDK17就能够获得64%的改进 — JavaOne开幕式</p></blockquote>\n<p>本文章的灵感来源于Java One开幕式上JDK开发者的这句话。JDK向前兼容的重要特性意味着，我们不需要改动任何代码只需要将运行源代码的JDK从8替换为JDK17就能够获得大量的提升（极地的成本）。 </p>\n<p>这篇文章讲汇总JDK8到JDK17的关键特性，理解为什么从JDK8到JDK17有着重要意义。</p>\n<h2 id=\"JDK底层-x2F-API语法：\"><a href=\"#JDK底层-x2F-API语法：\" class=\"headerlink\" title=\"JDK底层&#x2F;API语法：\"></a>JDK底层&#x2F;API语法：</h2><p><strong>JDK9</strong></p>\n<ol>\n<li>接口方法可以使用private修饰</li>\n<li>支持http2.0和websocketAPI</li>\n<li>模块化编程（对于依赖于Maven的开发者来说使用率和其产生的作用不高）</li>\n<li>String类底层数组从char[]变更为了byte[]。（byte能够在同样支持拉丁字符的情况下只占用1个字节，而char需要2个）</li>\n<li>支持NumberFormat API，能够对数字进行格式化或者压缩</li>\n</ol>\n<p><strong>JDK10</strong></p>\n<ol start=\"6\">\n<li>推出var关键字支持局部变量类型推断，类似JS推断出值的真实类型</li>\n</ol>\n<p><strong>JDK11</strong></p>\n<ol start=\"7\">\n<li>集合API的增强</li>\n<li>对Stream、Optional、集合API增强</li>\n</ol>\n<p><strong>JDK13</strong></p>\n<ol start=\"6\">\n<li>Socket底层优化，引入NIO</li>\n<li>switch表达式添加yield关键字，用于返回结果，作用类似return</li>\n<li>引入”””三双引号语法（文本块），内部不需要使用换行的转义字符。</li>\n</ol>\n<p><strong>JDK14</strong></p>\n<ol start=\"9\">\n<li>instanceof关键字优化，代码块中会直接给对象赋值</li>\n<li>引入record类，会自动生成构造器、getter、setter等方法，类似Lombok。</li>\n<li><strong>NPE优化，可以打印具体哪个方法跑出了NPE，方便单行代码多个函数调用时的异常排查。（开发者福音）</strong></li>\n</ol>\n<p><strong>JDK15</strong></p>\n<ol start=\"12\">\n<li>隐藏类Hiden Class</li>\n<li>密封类 Sealed Class，密封类能够限定继承或者实现的子类。</li>\n<li>对应java.lang.Class问类中新增了<code>isSealed</code>和<code>getPermittedSubClasses()</code>两个方法用于判断密封类和密封类所允许的拓展Class列表</li>\n</ol>\n<p><strong>JDK16</strong><br>正式的将record、instanceof特性引入到JDK版本中</p>\n<p><strong>JDK17</strong><br>正式引入密封类sealed class</p>\n<ol start=\"14\">\n<li>统一日志一步刷新</li>\n</ol>\n<h2 id=\"JVM优化：\"><a href=\"#JVM优化：\" class=\"headerlink\" title=\"JVM优化：\"></a>JVM优化：</h2><p><strong>JDK9</strong></p>\n<ol>\n<li>设置为G1默认垃圾回收器</li>\n</ol>\n<p><strong>JDK10</strong></p>\n<ol start=\"2\">\n<li>并行FullGC，优化G1的延迟（JDK9的Full GC只有单线程，而10之后会采用Young和Mixed相同数量的线程进行FullGC）</li>\n<li>线程局部管控，支持在不执行全局VM安全点的情况下对线程执行回调方法，停止单个线程，而不需要停止所有线程。</li>\n</ol>\n<p><strong>JDK11</strong></p>\n<ol start=\"4\">\n<li>推出ZGC（随后经过了多次的优化，是JDK17中综合性能最好的垃圾收集器，根据JavaOne的介绍其目标是能够支持亚秒级别回收TB界别的堆，还没达到但已经非常强了）</li>\n</ol>\n<p><strong>JDK12</strong></p>\n<ol start=\"5\">\n<li>推出Shenandoan垃圾收集器（12， 仅支持Linux，）</li>\n<li>拓展swtich表达式，支持返回值（12</li>\n<li>优化G1收集器，将G1的垃圾分为强制回收和可选部分，提高GC效率</li>\n</ol>\n<p><strong>JDK13</strong></p>\n<ol start=\"8\">\n<li>ZGC优化，将标记长时间的空闲对内存空间返回给OS，保证堆大小不会小于配置的最小堆内存</li>\n</ol>\n<p><strong>JDK15</strong></p>\n<ol start=\"9\">\n<li>ZGC性能优化</li>\n</ol>\n<h2 id=\"新语法-x2F-API实际使用\"><a href=\"#新语法-x2F-API实际使用\" class=\"headerlink\" title=\"新语法&#x2F;API实际使用\"></a>新语法&#x2F;API实际使用</h2><h3 id=\"val局部变量类型推断\"><a href=\"#val局部变量类型推断\" class=\"headerlink\" title=\"val局部变量类型推断\"></a>val局部变量类型推断</h3><p>标识符var不是关键字，而只是一个保留的类型名称，仅适用于局部变量，能够通过值来推断出值的数据类型过是什么。<br>示例</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//根据推断为 字符串类型</span>\n<span class=\"token keyword\">var</span> l <span class=\"token operator\">=</span> <span class=\"token number\">10L</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//根据10L 推断long 类型</span>\n<span class=\"token keyword\">var</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//根据 true推断 boolean 类型</span>\n<span class=\"token keyword\">var</span> flag1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这里会推断boolean类型。0表示false 非0表示true</span>\n<span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 推断 ArrayList&lt;String></span>\n<span class=\"token keyword\">var</span> stream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 推断 Stream&lt;String></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>反编译class文件：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> l <span class=\"token operator\">=</span> <span class=\"token number\">10L</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> flag1 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"switch表达式\"><a href=\"#switch表达式\" class=\"headerlink\" title=\"switch表达式\"></a>switch表达式</h3><ul>\n<li>现在支持使用switch赋值</li>\n<li>引入了lambda表达式，</li>\n<li>引入了yield语法，能够返回值，而不是使用break；<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"M\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"W\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"F\"</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"MWF\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"T\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TH\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"S\"</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"TTS\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token string\">\"Please insert a valid day.\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token string\">\"Looks like a Sunday.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"instanceof模式匹配\"><a href=\"#instanceof模式匹配\" class=\"headerlink\" title=\"instanceof模式匹配\"></a>instanceof模式匹配</h3><p>JDK14之前</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Article</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">Article</span> a<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Article</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>JDK14之后</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Article</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"NPE错误信息更详细\"><a href=\"#NPE错误信息更详细\" class=\"headerlink\" title=\"NPE错误信息更详细\"></a>NPE错误信息更详细</h3><p>JDK14之前</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Exception</span> in thread <span class=\"token string\">\"main\"</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>NullPointerException</span> at <span class=\"token class-name\">NullPointerExample</span><span class=\"token punctuation\">.</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerExample</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>JDK14之后</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Exception</span> in thread <span class=\"token string\">\"main\"</span> \n<span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>NullPointerException</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Cannot</span> invoke <span class=\"token string\">\"Blog.getAuthor()\"</span> because the <span class=\"token keyword\">return</span> value of <span class=\"token string\">\"Article.getBlog()\"</span> is <span class=\"token keyword\">null</span> at <span class=\"token class-name\">NullPointerExample</span><span class=\"token punctuation\">.</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerExample</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"record记录类\"><a href=\"#record记录类\" class=\"headerlink\" title=\"record记录类\"></a>record记录类</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">record</span> <span class=\"token class-name\">Author</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//or</span>\n<span class=\"token keyword\">record</span> <span class=\"token class-name\">Author</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> topic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>编译器会自动生成构造函数、g&#x2F;setter、equals&#x2F;hashCode、toString等方法</p>\n<h3 id=\"sealed-密封类\"><a href=\"#sealed-密封类\" class=\"headerlink\" title=\"sealed 密封类\"></a>sealed 密封类</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 创建一个密封的Hello接口，只允许Hello2类对其进行实现</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token keyword\">permits</span> <span class=\"token class-name\">Hello2</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"NumberFormat增加了对压缩数字的支持\"><a href=\"#NumberFormat增加了对压缩数字的支持\" class=\"headerlink\" title=\"NumberFormat增加了对压缩数字的支持\"></a>NumberFormat增加了对压缩数字的支持</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> number <span class=\"token operator\">=</span> <span class=\"token class-name\">NumberFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCompactNumberInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span><span class=\"token constant\">US</span><span class=\"token punctuation\">,</span> \n\t\t<span class=\"token class-name\">NumberFormat<span class=\"token punctuation\">.</span>Style</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SHORT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 其中number = “1k“</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"String类API的增强\"><a href=\"#String类API的增强\" class=\"headerlink\" title=\"String类API的增强\"></a>String类API的增强</h3><p>添加了<code>strip()</code>，<code>isBlack()</code>、<code>isEmpty()</code>、<code>lines()</code>、<code>repeat()</code>等多个方法</p>\n<ul>\n<li><code>strip()</code>看作是trim的增强，能够去掉unicode空格，对应的还有stripLeading()和stripTailing()</li>\n<li><code>isBlack()</code>和<code>isEmpty()</code>两者是String类中内置的方法，但依然建议使用各个工具包下的StringUtils。因为使用内置方法时，如果对象为空会产生NPE；而工具类下的StringUtils则不会。</li>\n<li><code>lines()</code>会将单个多行字符才成多个单行字符</li>\n<li><code>repeat()</code>能够构建一个或多个相同字符串组合的字符串</li>\n</ul>\n","text":" 从BenchMark可以看到，仅需要从JDK8到JDK17就能够获得64%的改进 — JavaOne开幕式 本文章的灵感来源于Java One开幕式上JDK开发者的这句话。JDK向前兼容的重要特性意味着，我们不需要改动任何代码只需要将运行源代码的JDK从8替换为JDK17就能够...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"JDK","slug":"JDK","count":1,"path":"api/tags/JDK.json"},{"name":"JVM","slug":"JVM","count":1,"path":"api/tags/JVM.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JDK%E5%BA%95%E5%B1%82-x2F-API%E8%AF%AD%E6%B3%95%EF%BC%9A\"><span class=\"toc-text\">JDK底层&#x2F;API语法：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JVM%E4%BC%98%E5%8C%96%EF%BC%9A\"><span class=\"toc-text\">JVM优化：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B0%E8%AF%AD%E6%B3%95-x2F-API%E5%AE%9E%E9%99%85%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">新语法&#x2F;API实际使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#val%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD\"><span class=\"toc-text\">val局部变量类型推断</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#switch%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">switch表达式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#instanceof%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">instanceof模式匹配</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#NPE%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E6%9B%B4%E8%AF%A6%E7%BB%86\"><span class=\"toc-text\">NPE错误信息更详细</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#record%E8%AE%B0%E5%BD%95%E7%B1%BB\"><span class=\"toc-text\">record记录类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sealed-%E5%AF%86%E5%B0%81%E7%B1%BB\"><span class=\"toc-text\">sealed 密封类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#NumberFormat%E5%A2%9E%E5%8A%A0%E4%BA%86%E5%AF%B9%E5%8E%8B%E7%BC%A9%E6%95%B0%E5%AD%97%E7%9A%84%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">NumberFormat增加了对压缩数字的支持</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#String%E7%B1%BBAPI%E7%9A%84%E5%A2%9E%E5%BC%BA\"><span class=\"toc-text\">String类API的增强</span></a></li></ol></li></ol>","author":{"name":"yaowenbin","slug":"blog-author","avatar":"https://yaowenbinqwq.github.io/file/avatar.jpeg","link":"/","description":"一位不断成长的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"FastJson安全漏洞分析","uid":"13c371c2ff633aa9e8eadac4915ee855","slug":"FastJson安全漏洞","date":"2023-03-30T01:27:51.735Z","updated":"2023-03-30T03:01:30.668Z","comments":true,"path":"api/articles/FastJson安全漏洞.json","cover":null,"text":"FastJson如何进行序列化的？FastJson和Jackson的序列化方式都是通过反射获取对象的getter方法来获得属性值的（Gson是通过直接反射属性）。 FastJson的序列化问题当一个类实现了一个接口的时候，在FastJson中进行序列化时，会将这个类的实际类型抹去...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":3,"path":"api/tags/Java.json"},{"name":"序列化","slug":"序列化","count":1,"path":"api/tags/序列化.json"}],"author":{"name":"yaowenbin","slug":"blog-author","avatar":"https://yaowenbinqwq.github.io/file/avatar.jpeg","link":"/","description":"一位不断成长的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"OkHttp：更加优雅的客户端OkHttps","uid":"c7562fc289c09e37ab4a4b417948e80b","slug":"OkHttp：更加优雅的客户端OkHttps","date":"2022-11-21T00:55:52.000Z","updated":"2022-11-21T00:56:34.620Z","comments":true,"path":"api/articles/OkHttp：更加优雅的客户端OkHttps.json","cover":null,"text":"上文中，我们介绍了OkHttp的一些常见的用法，以及对其API进行了一些便于调用的封装。而笔者在深入学习的过程中发现了一个基于Lambda表达式、链式调用进行封装的OkHttps，使其的调用方式更加的优雅、简介。 简介https://ok.zhxu.cn/v4/introduct...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"工具","slug":"工具","count":2,"path":"api/tags/工具.json"},{"name":"OkHttp","slug":"OkHttp","count":2,"path":"api/tags/OkHttp.json"}],"author":{"name":"yaowenbin","slug":"blog-author","avatar":"https://yaowenbinqwq.github.io/file/avatar.jpeg","link":"/","description":"一位不断成长的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}