{"title":"你真的了解你的MySQL吗(MySQL基准测试)","uid":"4468f948c4ca4e742d657728958a113e","slug":"你真的了解你的MySQL吗-MySQL基准测试","date":"2022-11-12T13:31:33.000Z","updated":"2022-11-12T13:31:47.878Z","comments":true,"path":"api/articles/你真的了解你的MySQL吗-MySQL基准测试.json","cover":[],"content":"<p>如果你没有真正的对服务器上的MySQL进行基准测试，就无法了解其真实情况到底是如何。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>基准测试是数据库工程师必备的技能之一，否则你如何知道自己真的在优化数据库？</p></blockquote>\n<h2 id=\"为什么需要基测？\"><a href=\"#为什么需要基测？\" class=\"headerlink\" title=\"为什么需要基测？\"></a>为什么需要基测？</h2><p>基测可以观察系统在不同压力下的行为：</p>\n<ul>\n<li>验证基于系统的一些假设是否符合实际情况。</li>\n<li>测试当前的运行情况，如果连这都不知道你如何进行优化？</li>\n<li>模拟比当前系统更高的负载，找出系统的平静。</li>\n<li>测试不同的硬件、软件操作系统配置。</li>\n<li>证明新采购的设备是否正确配置。</li>\n</ul>\n<h3 id=\"基测工具\"><a href=\"#基测工具\" class=\"headerlink\" title=\"基测工具\"></a>基测工具</h3><p>针对MySQL的基准测试工具就有很多了，但是我们推荐使用sysbench（较为简单）和Percona的TPCC-MySQL（面向复杂的场景）。</p>\n<h2 id=\"Sysbech测试案例\"><a href=\"#Sysbech测试案例\" class=\"headerlink\" title=\"Sysbech测试案例\"></a>Sysbech测试案例</h2><p>接下来的本章将着重讲解如何使用sysbench测试MySQL实例。</p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><ul>\n<li><p>Debian&#x2F;Ubuntu</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> https://packagecloud.io/install/repositories/akopytov/sysbench/script.deb.sh <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">bash</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> sysbench<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>RHEL&#x2F;Centos</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">curl <span class=\"token operator\">-</span>s https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>packagecloud<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span>install<span class=\"token operator\">/</span>repositories<span class=\"token operator\">/</span>akopytov<span class=\"token operator\">/</span>sysbench<span class=\"token operator\">/</span>script<span class=\"token punctuation\">.</span>rpm<span class=\"token punctuation\">.</span>sh <span class=\"token operator\">|</span> sudo bash\nsudo yum <span class=\"token operator\">-</span>y install sysbench<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>macOS</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># Add --with-postgresql if you need PostgreSQL support</span>\nbrew <span class=\"token function\">install</span> sysbench<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"查看脚本\"><a href=\"#查看脚本\" class=\"headerlink\" title=\"查看脚本\"></a>查看脚本</h3><p>sysbench支持更加复杂的测试，同时自身也内嵌了一些关于OLTP系统的测试，我们可以使用<code>find / -name oltp*.lua</code>来查找目录，然后跳转至相应目录查看全部脚本</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>OLTP(Online Transaction Processing) 一般指我们</p></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">find</span> / <span class=\"token parameter variable\">-name</span> oltp*.lua  <span class=\"token comment\">#查找sysbench自带的数据写入脚本的路径,后面执行命令需要用到</span>\n\n/usr/share/sysbench/oltp_delete.lua\n/usr/share/sysbench/oltp_update_non_index.lua\n/usr/share/sysbench/oltp_read_write.lua\n/usr/share/sysbench/oltp_update_index.lua\n/usr/share/sysbench/oltp_read_only.lua\n/usr/share/sysbench/oltp_common.lua\n/usr/share/sysbench/oltp_write_only.lua\n/usr/share/sysbench/oltp_point_select.lua\n/usr/share/sysbench/oltp_insert.lua\n/usr/share/sysbench/tests/include/oltp_legacy/oltp_simple.lua\n/usr/share/sysbench/tests/include/oltp_legacy/oltp.lua\n\n$ ll /usr/share/sysbench/\ntotal <span class=\"token number\">64</span>\n-rwxr-xr-x <span class=\"token number\">1</span> root root  <span class=\"token number\">1452</span> Apr <span class=\"token number\">25</span>  <span class=\"token number\">2020</span> bulk_insert.lua\n-rw-r--r-- <span class=\"token number\">1</span> root root <span class=\"token number\">14369</span> Apr <span class=\"token number\">25</span>  <span class=\"token number\">2020</span> oltp_common.lua\n-rwxr-xr-x <span class=\"token number\">1</span> root root  <span class=\"token number\">1290</span> Apr <span class=\"token number\">25</span>  <span class=\"token number\">2020</span> oltp_delete.lua\n-rwxr-xr-x <span class=\"token number\">1</span> root root  <span class=\"token number\">2415</span> Apr <span class=\"token number\">25</span>  <span class=\"token number\">2020</span> oltp_insert.lua\n-rwxr-xr-x <span class=\"token number\">1</span> root root  <span class=\"token number\">1265</span> Apr <span class=\"token number\">25</span>  <span class=\"token number\">2020</span> oltp_point_select.lua\n-rwxr-xr-x <span class=\"token number\">1</span> root root  <span class=\"token number\">1649</span> Apr <span class=\"token number\">25</span>  <span class=\"token number\">2020</span> oltp_read_only.lua\n-rwxr-xr-x <span class=\"token number\">1</span> root root  <span class=\"token number\">1824</span> Apr <span class=\"token number\">25</span>  <span class=\"token number\">2020</span> oltp_read_write.lua\n-rwxr-xr-x <span class=\"token number\">1</span> root root  <span class=\"token number\">1118</span> Apr <span class=\"token number\">25</span>  <span class=\"token number\">2020</span> oltp_update_index.lua\n-rwxr-xr-x <span class=\"token number\">1</span> root root  <span class=\"token number\">1127</span> Apr <span class=\"token number\">25</span>  <span class=\"token number\">2020</span> oltp_update_non_index.lua\n-rwxr-xr-x <span class=\"token number\">1</span> root root  <span class=\"token number\">1440</span> Apr <span class=\"token number\">25</span>  <span class=\"token number\">2020</span> oltp_write_only.lua\n-rwxr-xr-x <span class=\"token number\">1</span> root root  <span class=\"token number\">1919</span> Apr <span class=\"token number\">25</span>  <span class=\"token number\">2020</span> select_random_points.lua\n-rwxr-xr-x <span class=\"token number\">1</span> root root  <span class=\"token number\">2118</span> Apr <span class=\"token number\">25</span>  <span class=\"token number\">2020</span> select_random_ranges.lua\ndrwxr-xr-x <span class=\"token number\">4</span> root root  <span class=\"token number\">4096</span> Nov  <span class=\"token number\">4</span> <span class=\"token number\">16</span>:02 tests\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"小试牛刀\"><a href=\"#小试牛刀\" class=\"headerlink\" title=\"小试牛刀\"></a>小试牛刀</h3><p>接下来我们将sysbench正式作用于我们的服务器， 笔者准备了一台2C4G的云服务器、MySQL5.7、默认MySQL配置。<br>首先我们需要进入MySQL创建一个测试数据库名为sysbench_test：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ mysql <span class=\"token parameter variable\">-uroot</span> <span class=\"token parameter variable\">-p</span>\n\nmysql<span class=\"token operator\">></span> create database sysbench_test\n\nmysql<span class=\"token operator\">></span> quit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>对于数据库的测试，我们一般会使用到sysbench的<strong>oltp脚本</strong>， 而其中分为读、写、读写混合等多种场景。</p>\n<p>oltp测试步骤基本上分为：<strong>准备数据(prepare) - 执行测试(run) - 清理数据(cleanup)</strong> 三个步骤。而一般我们只需要用相同的参数运行不同的命令即可。</p>\n<p><strong>准备数据：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sysbench oltp_read_write --mysql-host<span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1 --mysql-port<span class=\"token operator\">=</span><span class=\"token number\">3306</span> --mysql-db<span class=\"token operator\">=</span>sysbench_test --mysql-user<span class=\"token operator\">=</span>root --mysql-password<span class=\"token operator\">=</span>xxxxx <span class=\"token parameter variable\">--table_size</span><span class=\"token operator\">=</span><span class=\"token number\">100</span> <span class=\"token parameter variable\">--tables</span><span class=\"token operator\">=</span><span class=\"token number\">10</span> <span class=\"token parameter variable\">--threads</span><span class=\"token operator\">=</span><span class=\"token number\">20</span> --report-interval<span class=\"token operator\">=</span><span class=\"token number\">10</span> <span class=\"token parameter variable\">--time</span><span class=\"token operator\">=</span><span class=\"token number\">120</span> prepare\n\n<span class=\"token comment\"># oltp_read_write 指定sysbench内嵌的测试脚本</span>\n<span class=\"token comment\">### 准备时参数</span>\n<span class=\"token comment\"># --mysql-host/db/user/passowrd/port 测试数据库地址/名称/用户名/密码/端口</span>\n<span class=\"token comment\"># --tables 指定生成的表数量　</span>\n<span class=\"token comment\"># --table_size 指定每张表表的数据量</span>\n\n<span class=\"token comment\">### 运行时桉树</span>\n<span class=\"token comment\"># --thread 指定测试时的线程数</span>\n<span class=\"token comment\"># --report-interval 指定运行时日志打印间隔</span>\n<span class=\"token comment\"># --time 指定测试时长</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p><strong>执行测试：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sysbench oltp_read_write --mysql-host<span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1 --mysql-port<span class=\"token operator\">=</span><span class=\"token number\">3306</span> --mysql-db<span class=\"token operator\">=</span>sysbench_test --mysql-user<span class=\"token operator\">=</span>root --mysql-password<span class=\"token operator\">=</span>xxx <span class=\"token parameter variable\">--table_size</span><span class=\"token operator\">=</span><span class=\"token number\">100</span> <span class=\"token parameter variable\">--tables</span><span class=\"token operator\">=</span><span class=\"token number\">10</span> <span class=\"token parameter variable\">--threads</span><span class=\"token operator\">=</span><span class=\"token number\">20</span> --report-interval<span class=\"token operator\">=</span><span class=\"token number\">10</span> <span class=\"token parameter variable\">--time</span><span class=\"token operator\">=</span><span class=\"token number\">120</span> run\nsysbench <span class=\"token number\">1.0</span>.20 <span class=\"token punctuation\">(</span>using bundled LuaJIT <span class=\"token number\">2.1</span>.0-beta2<span class=\"token punctuation\">)</span>\n\nRunning the <span class=\"token builtin class-name\">test</span> with following options:\nNumber of threads: <span class=\"token number\">20</span>\nReport intermediate results every <span class=\"token number\">10</span> second<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\nInitializing random number generator from current <span class=\"token function\">time</span>\n\n\nInitializing worker threads<span class=\"token punctuation\">..</span>.\n\nThreads started<span class=\"token operator\">!</span>\n\n<span class=\"token punctuation\">[</span> 10s <span class=\"token punctuation\">]</span> thds: <span class=\"token number\">20</span> tps: <span class=\"token number\">298.33</span> qps: <span class=\"token number\">6897.07</span> <span class=\"token punctuation\">(</span>r/w/o: <span class=\"token number\">4973.02</span>/1270.50/653.55<span class=\"token punctuation\">)</span> lat <span class=\"token punctuation\">(</span>ms,95%<span class=\"token punctuation\">)</span>: <span class=\"token number\">161.51</span> err/s: <span class=\"token number\">54.99</span> reconn/s: <span class=\"token number\">0.00</span>\n<span class=\"token punctuation\">[</span> 20s <span class=\"token punctuation\">]</span> thds: <span class=\"token number\">20</span> tps: <span class=\"token number\">325.41</span> qps: <span class=\"token number\">7474.29</span> <span class=\"token punctuation\">(</span>r/w/o: <span class=\"token number\">5380.34</span>/1384.24/709.72<span class=\"token punctuation\">)</span> lat <span class=\"token punctuation\">(</span>ms,95%<span class=\"token punctuation\">)</span>: <span class=\"token number\">147.61</span> err/s: <span class=\"token number\">58.80</span> reconn/s: <span class=\"token number\">0.00</span>\n<span class=\"token punctuation\">[</span> 30s <span class=\"token punctuation\">]</span> thds: <span class=\"token number\">20</span> tps: <span class=\"token number\">289.30</span> qps: <span class=\"token number\">6699.44</span> <span class=\"token punctuation\">(</span>r/w/o: <span class=\"token number\">4828.16</span>/1236.99/634.29<span class=\"token punctuation\">)</span> lat <span class=\"token punctuation\">(</span>ms,95%<span class=\"token punctuation\">)</span>: <span class=\"token number\">164.45</span> err/s: <span class=\"token number\">55.70</span> reconn/s: <span class=\"token number\">0.00</span>\n<span class=\"token punctuation\">[</span> 40s <span class=\"token punctuation\">]</span> thds: <span class=\"token number\">20</span> tps: <span class=\"token number\">326.50</span> qps: <span class=\"token number\">7444.30</span> <span class=\"token punctuation\">(</span>r/w/o: <span class=\"token number\">5354.60</span>/1380.80/708.90<span class=\"token punctuation\">)</span> lat <span class=\"token punctuation\">(</span>ms,95%<span class=\"token punctuation\">)</span>: <span class=\"token number\">150.29</span> err/s: <span class=\"token number\">55.90</span> reconn/s: <span class=\"token number\">0.00</span>\n<span class=\"token punctuation\">[</span> 50s <span class=\"token punctuation\">]</span> thds: <span class=\"token number\">20</span> tps: <span class=\"token number\">326.40</span> qps: <span class=\"token number\">7480.10</span> <span class=\"token punctuation\">(</span>r/w/o: <span class=\"token number\">5383.30</span>/1385.90/710.90<span class=\"token punctuation\">)</span> lat <span class=\"token punctuation\">(</span>ms,95%<span class=\"token punctuation\">)</span>: <span class=\"token number\">150.29</span> err/s: <span class=\"token number\">58.10</span> reconn/s: <span class=\"token number\">0.00</span>\n<span class=\"token punctuation\">[</span> 60s <span class=\"token punctuation\">]</span> thds: <span class=\"token number\">20</span> tps: <span class=\"token number\">338.10</span> qps: <span class=\"token number\">7669.44</span> <span class=\"token punctuation\">(</span>r/w/o: <span class=\"token number\">5508.03</span>/1429.91/731.50<span class=\"token punctuation\">)</span> lat <span class=\"token punctuation\">(</span>ms,95%<span class=\"token punctuation\">)</span>: <span class=\"token number\">147.61</span> err/s: <span class=\"token number\">55.30</span> reconn/s: <span class=\"token number\">0.00</span>\n<span class=\"token punctuation\">[</span> 70s <span class=\"token punctuation\">]</span> thds: <span class=\"token number\">20</span> tps: <span class=\"token number\">320.50</span> qps: <span class=\"token number\">7305.44</span> <span class=\"token punctuation\">(</span>r/w/o: <span class=\"token number\">5251.46</span>/1358.39/695.59<span class=\"token punctuation\">)</span> lat <span class=\"token punctuation\">(</span>ms,95%<span class=\"token punctuation\">)</span>: <span class=\"token number\">153.02</span> err/s: <span class=\"token number\">54.70</span> reconn/s: <span class=\"token number\">0.00</span>\n<span class=\"token punctuation\">[</span> 80s <span class=\"token punctuation\">]</span> thds: <span class=\"token number\">20</span> tps: <span class=\"token number\">361.80</span> qps: <span class=\"token number\">8212.92</span> <span class=\"token punctuation\">(</span>r/w/o: <span class=\"token number\">5901.02</span>/1528.60/783.30<span class=\"token punctuation\">)</span> lat <span class=\"token punctuation\">(</span>ms,95%<span class=\"token punctuation\">)</span>: <span class=\"token number\">137.35</span> err/s: <span class=\"token number\">59.60</span> reconn/s: <span class=\"token number\">0.00</span>\n<span class=\"token punctuation\">[</span> 90s <span class=\"token punctuation\">]</span> thds: <span class=\"token number\">20</span> tps: <span class=\"token number\">345.80</span> qps: <span class=\"token number\">7903.20</span> <span class=\"token punctuation\">(</span>r/w/o: <span class=\"token number\">5684.10</span>/1467.20/751.90<span class=\"token punctuation\">)</span> lat <span class=\"token punctuation\">(</span>ms,95%<span class=\"token punctuation\">)</span>: <span class=\"token number\">139.85</span> err/s: <span class=\"token number\">60.30</span> reconn/s: <span class=\"token number\">0.00</span>\n<span class=\"token punctuation\">[</span> 100s <span class=\"token punctuation\">]</span> thds: <span class=\"token number\">20</span> tps: <span class=\"token number\">351.00</span> qps: <span class=\"token number\">8032.68</span> <span class=\"token punctuation\">(</span>r/w/o: <span class=\"token number\">5779.16</span>/1489.81/763.71<span class=\"token punctuation\">)</span> lat <span class=\"token punctuation\">(</span>ms,95%<span class=\"token punctuation\">)</span>: <span class=\"token number\">134.90</span> err/s: <span class=\"token number\">61.70</span> reconn/s: <span class=\"token number\">0.00</span>\n<span class=\"token punctuation\">[</span> 110s <span class=\"token punctuation\">]</span> thds: <span class=\"token number\">20</span> tps: <span class=\"token number\">348.10</span> qps: <span class=\"token number\">7964.29</span> <span class=\"token punctuation\">(</span>r/w/o: <span class=\"token number\">5730.19</span>/1476.70/757.40<span class=\"token punctuation\">)</span> lat <span class=\"token punctuation\">(</span>ms,95%<span class=\"token punctuation\">)</span>: <span class=\"token number\">137.35</span> err/s: <span class=\"token number\">61.20</span> reconn/s: <span class=\"token number\">0.00</span>\n<span class=\"token punctuation\">[</span> 120s <span class=\"token punctuation\">]</span> thds: <span class=\"token number\">20</span> tps: <span class=\"token number\">343.40</span> qps: <span class=\"token number\">7899.49</span> <span class=\"token punctuation\">(</span>r/w/o: <span class=\"token number\">5690.09</span>/1459.50/749.90<span class=\"token punctuation\">)</span> lat <span class=\"token punctuation\">(</span>ms,95%<span class=\"token punctuation\">)</span>: <span class=\"token number\">134.90</span> err/s: <span class=\"token number\">63.10</span> reconn/s: <span class=\"token number\">0.00</span>\nSQL statistics:\n    queries performed:\n        read:                            <span class=\"token number\">654696</span>\n        write:                           <span class=\"token number\">168754</span>\n        other:                           <span class=\"token number\">86531</span>\n        total:                           <span class=\"token number\">909981</span>\n    transactions:                        <span class=\"token number\">39767</span>  <span class=\"token punctuation\">(</span><span class=\"token number\">331.22</span> per sec.<span class=\"token punctuation\">)</span>\n    queries:                             <span class=\"token number\">909981</span> <span class=\"token punctuation\">(</span><span class=\"token number\">7579.29</span> per sec.<span class=\"token punctuation\">)</span>\n    ignored errors:                      <span class=\"token number\">6997</span>   <span class=\"token punctuation\">(</span><span class=\"token number\">58.28</span> per sec.<span class=\"token punctuation\">)</span>\n    reconnects:                          <span class=\"token number\">0</span>      <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> per sec.<span class=\"token punctuation\">)</span>\n\nGeneral statistics:\n    total time:                          <span class=\"token number\">120</span>.0600s\n    total number of events:              <span class=\"token number\">39767</span>\n\nLatency <span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span>:\n         min:                                    <span class=\"token number\">4.99</span>\n         avg:                                   <span class=\"token number\">60.36</span>\n         max:                                  <span class=\"token number\">407.99</span>\n         95th percentile:                      <span class=\"token number\">147.61</span>\n         sum:                              <span class=\"token number\">2400503.17</span>\n\nThreads fairness:\n    events <span class=\"token punctuation\">(</span>avg/stddev<span class=\"token punctuation\">)</span>:           <span class=\"token number\">1988.3500</span>/25.31\n    execution <span class=\"token function\">time</span> <span class=\"token punctuation\">(</span>avg/stddev<span class=\"token punctuation\">)</span>:   <span class=\"token number\">120.0252</span>/0.02\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>重要的参数指标为SQL statistics下的**queries(即QPS)**：达到了7579 per sec.<br>也就是说当前MySQL在10张表100条数据的情况下面对20个线程的读写吞吐量达到了7579QPS。<br>当然这只是在小数据小压力的情况下 ，并不能直接作为线上环境的参考。</p>\n<p>那么接下来让我们清理数据准备下一轮测试</p>\n<h3 id=\"加大压力\"><a href=\"#加大压力\" class=\"headerlink\" title=\"加大压力\"></a>加大压力</h3><p>刚刚只是尝试一下sysbench的功能，这次我们开始使用较大的压力对MySQL进行<strong>读测试</strong>（一般对MySQL的读写测试应该分开单独的进行以更好的评估MySQL哪些方面需要提升）。</p>\n<ul>\n<li>测试操作：读</li>\n<li>线程数：100</li>\n<li>表大小：100w</li>\n<li>表数量：10</li>\n<li>测试时长：5分钟</li>\n</ul>\n<p><strong>对应执行命令：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sysbench oltp_read_only --mysql-host<span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1 --mysql-port<span class=\"token operator\">=</span><span class=\"token number\">3306</span> --mysql-db<span class=\"token operator\">=</span>sysbench_test --mysql-user<span class=\"token operator\">=</span>root --mysql-password<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>yourpassowrd<span class=\"token punctuation\">]</span> <span class=\"token parameter variable\">--table_size</span><span class=\"token operator\">=</span><span class=\"token number\">1000000</span> <span class=\"token parameter variable\">--tables</span><span class=\"token operator\">=</span><span class=\"token number\">10</span> <span class=\"token parameter variable\">--threads</span><span class=\"token operator\">=</span><span class=\"token number\">100</span> --report-interval<span class=\"token operator\">=</span><span class=\"token number\">10</span> <span class=\"token parameter variable\">--time</span><span class=\"token operator\">=</span><span class=\"token number\">300</span> <span class=\"token punctuation\">[</span>command<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>测试结果</strong>：<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/8372900/1667553750965-d84453f1-c18b-4347-959d-87e0c4e0d512.png#clientId=u2da218fa-0688-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=556&id=ua19f638b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=556&originWidth=1350&originalType=binary&ratio=1&rotation=0&showTitle=false&size=118432&status=done&style=none&taskId=u37619416-f64e-4b4e-a981-9a9f29b55b6&title=&width=1350\" alt=\"image.png\"><br>可以看到我们的MySQL在100个并发访问线程下对于10张表，每张表100w数据进行5分钟的读写测试。能够达到1w的读性能， 还是非常不错的。</p>\n<h3 id=\"测试写性能\"><a href=\"#测试写性能\" class=\"headerlink\" title=\"测试写性能\"></a>测试写性能</h3><p>现在让我们清理一下测试数据，最后测试一轮写性能</p>\n<ul>\n<li>测试操作：写</li>\n<li>线程数：100</li>\n<li>表大小：100w</li>\n<li>表数量：10</li>\n<li>测试时长：3分钟</li>\n</ul>\n<p><strong>测试命令</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sysbench oltp_write_only --mysql-host<span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1 --mysql-port<span class=\"token operator\">=</span><span class=\"token number\">3306</span> --mysql-db<span class=\"token operator\">=</span>sysbench_test --mysql-user<span class=\"token operator\">=</span>root --mysql-password<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>yourpassowrd<span class=\"token punctuation\">]</span> <span class=\"token parameter variable\">--table_size</span><span class=\"token operator\">=</span><span class=\"token number\">1000000</span> <span class=\"token parameter variable\">--tables</span><span class=\"token operator\">=</span><span class=\"token number\">10</span> <span class=\"token parameter variable\">--threads</span><span class=\"token operator\">=</span><span class=\"token number\">100</span> --report-interval<span class=\"token operator\">=</span><span class=\"token number\">10</span> <span class=\"token parameter variable\">--time</span><span class=\"token operator\">=</span><span class=\"token number\">300</span> <span class=\"token punctuation\">[</span>command<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p><strong>测试结果</strong>：<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/8372900/1667554566626-d52eaf7e-767a-41e0-9ed6-e8b4b6ca7518.png#clientId=uc72ef12f-7f9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=502&id=ue56a4b4c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=502&originWidth=952&originalType=binary&ratio=1&rotation=0&showTitle=false&size=169932&status=done&style=none&taskId=u38e56c11-d38d-4d73-9db8-ceeb5b01a01&title=&width=952\" alt=\"image.png\"><br>可以看到测试机器上的这个MySQL能够达到9k接近1w的写QPS。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>基本测试是我们了解MySQL所要掌握的必备技能之一，而sysbench是一款多线程的性能测试工具。 使用它我们就能够对MySQL的读写QPS有一个非常好的了解。</p>\n","feature":true,"text":"如果你没有真正的对服务器上的MySQL进行基准测试，就无法了解其真实情况到底是如何。 基准测试是数据库工程师必备的技能之一，否则你如何知道自己真的在优化数据库？ 为什么需要基测？基测可以观察系统在不同压力下的行为： 验证基于系统的一些假设是否符合实际情况。 测试当前的运行情况，如...","link":"","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":5,"path":"api/tags/MySQL.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%9F%BA%E6%B5%8B%EF%BC%9F\"><span class=\"toc-text\">为什么需要基测？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%B5%8B%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">基测工具</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Sysbech%E6%B5%8B%E8%AF%95%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">Sysbech测试案例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E8%BD%BD\"><span class=\"toc-text\">下载</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">查看脚本</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80\"><span class=\"toc-text\">小试牛刀</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E5%A4%A7%E5%8E%8B%E5%8A%9B\"><span class=\"toc-text\">加大压力</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E5%86%99%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">测试写性能</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"姚文彬","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"深入底层 掌握脉搏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Performance Schema入门指南:你的MySQL性能监测杀器","uid":"ba1c6774f6090755efbcf2d6c3343eae","slug":"Performance-Schema入门指南-你的MySQL性能监测杀器","date":"2022-11-28T14:23:44.000Z","updated":"2022-11-28T14:25:33.753Z","comments":true,"path":"api/articles/Performance-Schema入门指南-你的MySQL性能监测杀器.json","cover":null,"text":"简介Performance提供了有关MySQL服务器内部运行的底层指标。在高负载下数据库调优是一个循环迭代的过程，每次更改以调整数据库的性能时，都需要了解更改是否有什么影响。而Performance Schama就是一个能够存储回答这个问题所需要的数据的数据库。 工作机制插桩（i...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":5,"path":"api/tags/MySQL.json"},{"name":"监控","slug":"监控","count":1,"path":"api/tags/监控.json"}],"author":{"name":"姚文彬","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"深入底层 掌握脉搏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"多租户架构解析","uid":"bb79ff4f10f53b63ae134cf1b5bcc787","slug":"多租户架构解析","date":"2023-09-19T02:18:48.000Z","updated":"2023-09-19T02:19:16.591Z","comments":true,"path":"api/articles/多租户架构解析.json","cover":null,"text":"多租户架构是SaaS系统开发中不可避免要考虑到的问题之一。 多租户的意义在在于数据完全的隔离，即公司A无法看到公司B的任何数据，反之亦然。 使得每一个公司从自身层面上看都是独占系统的。 实现多租户功能需要尽可能的通过架构底层来实现，而不是让开发人员从业务SQL上进行拼接。否则极其...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"架构设计","slug":"架构设计","count":1,"path":"api/tags/架构设计.json"}],"author":{"name":"姚文彬","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"深入底层 掌握脉搏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}