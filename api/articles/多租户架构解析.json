{"title":"多租户架构解析","uid":"bb79ff4f10f53b63ae134cf1b5bcc787","slug":"多租户架构解析","date":"2023-09-19T02:18:48.000Z","updated":"2023-09-19T02:19:16.591Z","comments":true,"path":"api/articles/多租户架构解析.json","cover":null,"content":"<p>多租户架构是SaaS系统开发中不可避免要考虑到的问题之一。 多租户的意义在在于数据完全的隔离，即公司A无法看到公司B的任何数据，反之亦然。 使得每一个公司从自身层面上看都是独占系统的。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>实现多租户功能需要尽可能的通过架构底层来实现，而不是让开发人员从业务SQL上进行拼接。否则极其容易出现问题，稍有不慎就会导致业务数据错乱。</p></blockquote>\n<p>而业界实现多租户主要归纳为几种解决方案：单表租户列、多租户表单数据库、多数据库。</p>\n<h2 id=\"单表租户列\"><a href=\"#单表租户列\" class=\"headerlink\" title=\"单表租户列\"></a>单表租户列</h2><p>在每个业务表中添加上一个租户的列（比如说tenant_id），在每次查询时，都通过租户列进行过滤以实现数据隔离。 这是最简单、也是较为普遍的设计方案。 使得一个系统中只需要有一个数据库，一套业务表就能够实现多租户架构。</p>\n<p>实现这种方案，我们可以通过mybatis、或者是mybatis-plus中的插件来实现。</p>\n<p>以Mybatis-Plus为例，我们只需要实现一个插件，并且将其注入到IOC容器中，Myabtis-Plus就会自动识别到该插件并注册。</p>\n<p>单表租户列的方案适用于前期平台的业务量并不高，即使所有租户的数据量加起来都不会超过MySQL单表所能够承载的数据量（MySQL单表在保证性能下能够支撑的最大数据量参考TODO）。</p>\n<p>设计方案简单，仅需要引入Mybatis插件即可实现多租户隔离。</p>\n<h2 id=\"租户多表-x2F-租户多库\"><a href=\"#租户多表-x2F-租户多库\" class=\"headerlink\" title=\"租户多表&#x2F;租户多库\"></a>租户多表&#x2F;租户多库</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>对于MySQL中，这里的多库指的是多Schema，而不是多个MySQL服务器实例</p></blockquote>\n<p>如果业务数据增长较快，很快就会抵达MySQL下单表的性能瓶颈时，我们就需要考虑将单数据库单表切分为多表或者是多数据库单表。</p>\n<p>租户多表的思想是：<strong>不同的租户数据使用使用不同的后缀表或者是库区分</strong>。在租户多表的情况下比如说公司A的user表叫user_001，公司B的user表叫user_002；在租户多库的情况下公司的A的数据存放在app_01.user表中，公司B的数据存放在app_02.user中。</p>\n<p>租户多表&#x2F;多库方案使得不同的公司的数据存放在不同的数据表&#x2F;库中，使得数据和性能的隔离性进一步提升。无论如何查询，公司A都无法查询到公司B的数据，并且每个租户都具有自身单独的业务数据量，不会因为公司A的数据量大超出而公司B的数据量小，却因为数据存放在同一张表中，导致公司B使用系统时性能也收到影响。</p>\n<p>在具体实现中，我们主要需要依靠<strong>动态表名</strong>的功能来实现租户多表&#x2F;库方案，业界目前主流的有：Myabtis-Plus的<a href=\"Mybatis-Plus%E5%8A%A8%E6%80%81%E8%A1%A8%E5%90%8D%E6%8F%92%E4%BB%B6\">动态表名插件</a>，同样以插件化的方式拦截SQL语句进行动态拼接表名、Sharding Sphere下的<a href=\"https://shardingsphere.apache.org/document/4.1.0/cn/manual/sharding-jdbc/usage/sharding/\">ShardingJDBC</a>在业务应用上<a href=\"https://developer.aliyun.com/article/856828\">实现多租户表的动态拼接</a>、或者是阿里的<a href=\"http://www.mycat.org.cn/\">MyCat</a>通过代理数据库的方式实现。</p>\n<h2 id=\"租户独立数据库\"><a href=\"#租户独立数据库\" class=\"headerlink\" title=\"租户独立数据库\"></a>租户独立数据库</h2><p>独立数据库方案和思想是：将每个租户的数据存放在独立的数据库中，使得每个租户的数据和性能完全隔离，不会因为租户A的数据库崩溃影响到租户B的使用，使得可用性得到了最大的保障。</p>\n<p>要实现独立数据库的方案，我们需要借助动态数据源来实现数据库的连接的切换，在具体的实现，我们可以考虑使用由Myabtis-Plus团队研发的dynamic-datasource组件实现动态数据源和切换、同样使用Sharding JDBC或者是MyCat实现数据源的切换都能够实现该方案。</p>\n<p>独立数据库的方案虽然享受着数据和性能隔离的最大优势，但是在机器的成本上也会随着每一个租户的增长而增长。所以独立数据库一般在成本不再是一个考量范围，或者是对性能隔离有着严格要求时使用。（对于数据库的高可用，在租户多表&#x2F;多库依然可以通过分片来实现）</p>\n","text":"多租户架构是SaaS系统开发中不可避免要考虑到的问题之一。 多租户的意义在在于数据完全的隔离，即公司A无法看到公司B的任何数据，反之亦然。 使得每一个公司从自身层面上看都是独占系统的。 实现多租户功能需要尽可能的通过架构底层来实现，而不是让开发人员从业务SQL上进行拼接。否则极其...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"架构设计","slug":"架构设计","count":1,"path":"api/tags/架构设计.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E8%A1%A8%E7%A7%9F%E6%88%B7%E5%88%97\"><span class=\"toc-text\">单表租户列</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A7%9F%E6%88%B7%E5%A4%9A%E8%A1%A8-x2F-%E7%A7%9F%E6%88%B7%E5%A4%9A%E5%BA%93\"><span class=\"toc-text\">租户多表&#x2F;租户多库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A7%9F%E6%88%B7%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">租户独立数据库</span></a></li></ol>","author":{"name":"姚文彬","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"深入底层 掌握脉搏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"你真的了解你的MySQL吗(MySQL基准测试)","uid":"4468f948c4ca4e742d657728958a113e","slug":"你真的了解你的MySQL吗-MySQL基准测试","date":"2022-11-12T13:31:33.000Z","updated":"2022-11-12T13:31:47.878Z","comments":true,"path":"api/articles/你真的了解你的MySQL吗-MySQL基准测试.json","cover":[],"text":"如果你没有真正的对服务器上的MySQL进行基准测试，就无法了解其真实情况到底是如何。 基准测试是数据库工程师必备的技能之一，否则你如何知道自己真的在优化数据库？ 为什么需要基测？基测可以观察系统在不同压力下的行为： 验证基于系统的一些假设是否符合实际情况。 测试当前的运行情况，如...","link":"","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":5,"path":"api/tags/MySQL.json"}],"author":{"name":"姚文彬","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"深入底层 掌握脉搏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Maven Deamon-更快的Maven","uid":"7685adb7b43e1e02fce5149c97fbe7da","slug":"Maven-Deamon-更快的Maven","date":"2023-08-27T14:53:23.000Z","updated":"2023-08-27T14:59:35.539Z","comments":true,"path":"api/articles/Maven-Deamon-更快的Maven.json","cover":[],"text":"简介Maven Daemon 简称mvnd，使用与Gradle与Takari相同的技巧，为Maven项目提供了更快的构建。 内置了maven 通过一个长期的存活的后台线程来完成实际的构建。 同一个后台线程能够服务于多个项目之间的构建。 每个mvnd的客户端，使用了GraaleVM...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Build","slug":"Build","count":1,"path":"api/tags/Build.json"}],"author":{"name":"姚文彬","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"深入底层 掌握脉搏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}